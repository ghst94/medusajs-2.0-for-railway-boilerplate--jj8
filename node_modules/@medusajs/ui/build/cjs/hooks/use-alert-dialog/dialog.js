'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var clx = require('../../utils/clx.js');
var alertDialog = require('../../components/alert-dialog/alert-dialog.js');
var label = require('../../components/label/label.js');
var input = require('../../components/input/input.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const Dialog = ({
  open,
  title,
  description,
  verificationText,
  cancelText = "Cancel",
  confirmText = "Confirm",
  onConfirm,
  onCancel
}) => {
  const [userInput, setUserInput] = React__namespace.useState("");
  const handleUserInput = event => {
    setUserInput(event.target.value);
  };
  const validInput = React__namespace.useMemo(() => {
    if (!verificationText) {
      return true;
    }
    return userInput === verificationText;
  }, [userInput, verificationText]);
  const handleFormSubmit = event => {
    event.preventDefault();
    if (validInput) {
      onConfirm();
    }
  };
  React__namespace.useEffect(() => {
    const handleEscape = event => {
      if (event.key === "Escape" && open) {
        onCancel();
      }
    };
    document.addEventListener("keydown", handleEscape);
    return () => {
      document.removeEventListener("keydown", handleEscape);
    };
  }, [onCancel, open]);
  return /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog, {
    open: open
  }, /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog.Content, null, /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog.Header, null, /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog.Title, null, title), /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog.Description, null, description)), verificationText && /*#__PURE__*/React__namespace.createElement("form", {
    onSubmit: handleFormSubmit
  }, /*#__PURE__*/React__namespace.createElement("fieldset", {
    className: "border-ui-border-base mt-6 flex flex-col gap-y-4 border-y p-6"
  }, /*#__PURE__*/React__namespace.createElement(label.Label, {
    htmlFor: "verificationText",
    className: "text-subtle"
  }, "Please type", " ", /*#__PURE__*/React__namespace.createElement("span", {
    className: clx.clx(label.labelVariants({
      size: "base",
      weight: "plus"
    }), "text-ui-fg-base")
  }, verificationText), " ", "to confirm."), /*#__PURE__*/React__namespace.createElement(input.Input, {
    autoFocus: true,
    autoComplete: "off",
    id: "verificationText",
    placeholder: verificationText,
    onChange: handleUserInput
  }))), /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog.Footer, null, /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog.Cancel, {
    onClick: onCancel
  }, cancelText), /*#__PURE__*/React__namespace.createElement(alertDialog.AlertDialog.Action, {
    onClick: verificationText ? undefined : onConfirm,
    disabled: !validInput,
    type: verificationText ? "submit" : "button"
  }, confirmText))));
};
var Dialog$1 = Dialog;

exports.default = Dialog$1;
