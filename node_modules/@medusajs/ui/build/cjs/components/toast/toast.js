'use strict';

var icons = require('@medusajs/icons');
var Primitives = require('@radix-ui/react-toast');
var React = require('react');
var clx = require('../../utils/clx.js');
var label = require('../label/label.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Primitives__namespace = /*#__PURE__*/_interopNamespaceDefault(Primitives);
var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const ToastProvider = Primitives__namespace.Provider;
ToastProvider.displayName = "ToastProvider";
const ToastViewport = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Viewport, Object.assign({
  ref: ref,
  className: clx.clx("fixed right-0 top-0 z-[100] w-full p-6 md:max-w-[484px]", className)
}, props)));
ToastViewport.displayName = "ToastViewport";
const Toast = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  variant,
  title,
  description,
  action,
  disableDismiss = false,
  ...props
}, ref) => {
  let Icon = undefined;
  switch (variant) {
    case "success":
      Icon = /*#__PURE__*/React__namespace.createElement(icons.CheckCircleSolid, {
        className: "text-ui-tag-green-icon"
      });
      break;
    case "warning":
      Icon = /*#__PURE__*/React__namespace.createElement(icons.ExclamationCircleSolid, {
        className: "text-ui-tag-orange-icon"
      });
      break;
    case "error":
      Icon = /*#__PURE__*/React__namespace.createElement(icons.XCircleSolid, {
        className: "text-ui-tag-red-icon"
      });
      break;
    case "loading":
      Icon = /*#__PURE__*/React__namespace.createElement(icons.Spinner, {
        className: "text-ui-tag-blue-icon animate-spin"
      });
      break;
    default:
      Icon = /*#__PURE__*/React__namespace.createElement(icons.InformationCircleSolid, {
        className: "text-ui-fg-base"
      });
      break;
  }
  if (action && !action.altText) {
    // eslint-disable-next-line turbo/no-undeclared-env-vars
    if (process.env.NODE_ENV === "development") {
      console.warn("Omitting `altText` from the action is not recommended. Please provide a description for screen readers.");
    }
  }
  return /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Root, Object.assign({
    ref: ref,
    className: clx.clx("bg-ui-bg-base shadow-elevation-flyout flex h-fit min-h-[74px] w-full overflow-hidden rounded-md md:max-w-[440px]", "data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none", className)
  }, props), /*#__PURE__*/React__namespace.createElement("div", {
    className: "border-ui-border-base flex flex-1 items-start space-x-3 border-r p-4"
  }, /*#__PURE__*/React__namespace.createElement("span", {
    "aria-hidden": true
  }, Icon), /*#__PURE__*/React__namespace.createElement("div", null, title && /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Title, {
    className: clx.clx(label.labelVariants({
      size: "small",
      weight: "plus"
    }), "text-ui-fg-base")
  }, title), description && /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Description, {
    className: clx.clx(label.labelVariants({
      size: "base"
    }), "text-ui-fg-subtle")
  }, description))), /*#__PURE__*/React__namespace.createElement("div", {
    className: "flex flex-col"
  }, action && /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Action, {
    altText: action.altText,
    className: clx.clx("text-ui-fg-base bg-ui-bg-base hover:bg-ui-bg-base-hover active:bg-ui-bg-base-pressed flex flex-1 items-center justify-center px-6 transition-colors", label.labelVariants({
      size: "small",
      weight: "plus"
    }), {
      "text-ui-fg-error": variant === "error"
    }),
    onClick: e => {
      e.preventDefault();
      action.onClick();
    },
    type: "button"
  }, action.label), /*#__PURE__*/React__namespace.createElement("div", {
    className: "bg-ui-border-base h-px w-full"
  })), !disableDismiss && /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Close, {
    className: clx.clx("text-ui-fg-subtle bg-ui-bg-base hover:bg-ui-bg-base-hover active:bg-ui-bg-base-pressed flex flex-1 items-center justify-center px-6 transition-colors", label.labelVariants({
      size: "small",
      weight: "plus"
    }), {
      "h-1/2": action,
      "h-full": !action
    }),
    "aria-label": "Close"
  }, "Close")));
});
Toast.displayName = "Toast";

exports.Toast = Toast;
exports.ToastProvider = ToastProvider;
exports.ToastViewport = ToastViewport;
