'use strict';

var Primitives = require('@radix-ui/react-label');
var classVarianceAuthority = require('class-variance-authority');
var React = require('react');
var clx = require('../../utils/clx.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Primitives__namespace = /*#__PURE__*/_interopNamespaceDefault(Primitives);
var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const labelVariants = classVarianceAuthority.cva("font-sans", {
  variants: {
    size: {
      xsmall: "text-xs leading-5",
      small: "text-[13px] leading-5",
      base: "text-sm leading-5",
      large: "text-base leading-5"
    },
    weight: {
      regular: "font-normal",
      plus: "font-medium"
    }
  },
  defaultVariants: {
    size: "base",
    weight: "regular"
  }
});
const Label = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  size = "base",
  weight = "regular",
  ...props
}, ref) => {
  return /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Root, Object.assign({
    ref: ref,
    className: clx.clx(labelVariants({
      size,
      weight
    }), className)
  }, props));
});
Label.displayName = "Label";

exports.Label = Label;
exports.labelVariants = labelVariants;
