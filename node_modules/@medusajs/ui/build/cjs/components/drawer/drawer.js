'use strict';

var icons = require('@medusajs/icons');
var Primitives = require('@radix-ui/react-dialog');
var React = require('react');
var clx = require('../../utils/clx.js');
var badge = require('../badge/badge.js');
var text = require('../text/text.js');
var button = require('../button/button.js');
var heading = require('../heading/heading.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Primitives__namespace = /*#__PURE__*/_interopNamespaceDefault(Primitives);
var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const Root = Primitives__namespace.Root;
Root.displayName = "Drawer.Root";
const Trigger = Primitives__namespace.Trigger;
Trigger.displayName = "Drawer.Trigger";
const Close = Primitives__namespace.Close;
Close.displayName = "Drawer.Close";
const Portal = Primitives__namespace.Portal;
Portal.displayName = "Drawer.Portal";
const Overlay = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Overlay, Object.assign({
    ref: ref,
    className: clx.clx("fixed inset-0 z-50", className)
  }, props));
});
Overlay.displayName = "Drawer.Overlay";
const Content = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React__namespace.createElement(Portal, null, /*#__PURE__*/React__namespace.createElement(Overlay, null), /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Content, Object.assign({
    ref: ref,
    className: clx.clx("bg-ui-bg-base shadow-elevation-modal fixed inset-y-2 right-2 z-50 flex w-full max-w-[560px] flex-1 flex-col rounded-lg border focus:outline-none",
    // "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:slide-out-to-right-1/2 data-[state=open]:slide-in-from-right-1/2 duration-200",  // Re-enable when Admin UI has been cleaned up
    className)
  }, props)));
});
Content.displayName = "Drawer.Content";
const Header = ({
  children,
  className,
  ...props
}) => {
  return /*#__PURE__*/React__namespace.createElement("div", Object.assign({
    className: "border-ui-border-base flex items-start justify-between gap-x-4 border-b px-8 py-6"
  }, props), /*#__PURE__*/React__namespace.createElement("div", {
    className: clx.clx("flex flex-col gap-y-1", className)
  }, children), /*#__PURE__*/React__namespace.createElement("div", {
    className: "flex items-center gap-x-2"
  }, /*#__PURE__*/React__namespace.createElement(badge.Badge, {
    size: "sm",
    color: "grey"
  }, "esc"), /*#__PURE__*/React__namespace.createElement(Close, {
    asChild: true
  }, /*#__PURE__*/React__namespace.createElement(button.Button, {
    variant: "transparent",
    size: "sm",
    format: "icon"
  }, /*#__PURE__*/React__namespace.createElement(icons.XMark, null)))));
};
Header.displayName = "Drawer.Header";
const Body = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React__namespace.createElement("div", Object.assign({
    className: clx.clx("flex-1 px-8 pb-16 pt-6", className)
  }, props));
};
Body.displayName = "Drawer.Body";
const Footer = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React__namespace.createElement("div", Object.assign({
    className: clx.clx("border-ui-border-base flex items-center justify-end space-x-2 overflow-y-scroll border-t px-8 pb-6 pt-4", className)
  }, props));
};
Footer.displayName = "Drawer.Footer";
const Title = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  children,
  ...props
}, ref) => /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Title, Object.assign({
  ref: ref,
  className: clx.clx(className),
  asChild: true
}, props), /*#__PURE__*/React__namespace.createElement(heading.Heading, {
  level: "h1"
}, children)));
Title.displayName = "Drawer.Title";
const Description = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  children,
  ...props
}, ref) => /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Description, Object.assign({
  ref: ref,
  className: clx.clx(className),
  asChild: true
}, props), /*#__PURE__*/React__namespace.createElement(text.Text, null, children)));
Description.displayName = "Drawer.Description";
const Drawer = Object.assign(Root, {
  Body,
  Close,
  Content,
  Description,
  Footer,
  Header,
  Title,
  Trigger
});

exports.Drawer = Drawer;
