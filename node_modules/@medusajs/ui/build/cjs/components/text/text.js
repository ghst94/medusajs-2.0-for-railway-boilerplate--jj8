'use strict';

var reactSlot = require('@radix-ui/react-slot');
var classVarianceAuthority = require('class-variance-authority');
var React = require('react');
var clx = require('../../utils/clx.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const textVariants = classVarianceAuthority.cva("", {
  variants: {
    size: {
      base: "text-sm leading-6",
      large: "text-base leading-7",
      xlarge: "text-lg leading-8"
    },
    weight: {
      regular: "font-normal",
      plus: "font-medium"
    },
    family: {
      sans: "font-sans",
      mono: "font-mono"
    }
  },
  defaultVariants: {
    family: "sans",
    size: "base",
    weight: "regular"
  }
});
const Text = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  asChild = false,
  size = "base",
  weight = "regular",
  family = "sans",
  children,
  ...props
}, ref) => {
  const Component = asChild ? reactSlot.Slot : "p";
  return /*#__PURE__*/React__namespace.createElement(Component, Object.assign({
    ref: ref,
    className: clx.clx(textVariants({
      size,
      weight,
      family
    }), className)
  }, props), children);
});
Text.displayName = "Text";

exports.Text = Text;
exports.textVariants = textVariants;
