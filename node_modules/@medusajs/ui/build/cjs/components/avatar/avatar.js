'use strict';

var Primitives = require('@radix-ui/react-avatar');
var classVarianceAuthority = require('class-variance-authority');
var React = require('react');
var clx = require('../../utils/clx.js');
var label = require('../label/label.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Primitives__namespace = /*#__PURE__*/_interopNamespaceDefault(Primitives);
var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const avatarVariants = classVarianceAuthority.cva("border-ui-border-strong flex shrink-0 items-center justify-center overflow-hidden border", {
  variants: {
    variant: {
      squared: "rounded-lg",
      rounded: "rounded-full"
    },
    size: {
      base: "h-8 w-8",
      large: "h-10 w-10"
    }
  },
  defaultVariants: {
    variant: "rounded",
    size: "base"
  }
});
const innerVariants = classVarianceAuthority.cva("aspect-square object-cover object-center", {
  variants: {
    variant: {
      squared: "rounded-lg",
      rounded: "rounded-full"
    },
    size: {
      base: clx.clx(label.labelVariants({
        size: "small",
        weight: "plus"
      }), "h-6 w-6"),
      large: clx.clx(label.labelVariants({
        size: "base",
        weight: "plus"
      }), "h-8 w-8")
    }
  },
  defaultVariants: {
    variant: "rounded",
    size: "base"
  }
});
const Avatar = /*#__PURE__*/React__namespace.forwardRef(({
  src,
  fallback,
  variant = "rounded",
  size = "base",
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Root, Object.assign({
    ref: ref
  }, props, {
    className: clx.clx(avatarVariants({
      variant,
      size
    }), className)
  }), src && /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Image, {
    src: src,
    className: innerVariants({
      variant,
      size
    })
  }), /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Fallback, {
    className: clx.clx(innerVariants({
      variant,
      size
    }), "bg-ui-bg-component text-ui-fg-subtle pointer-events-none flex select-none items-center justify-center")
  }, fallback));
});
Avatar.displayName = "Avatar";

exports.Avatar = Avatar;
