'use strict';

var Primitives = require('@radix-ui/react-tooltip');
var React = require('react');
var clx = require('../../utils/clx.js');
var label = require('../label/label.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Primitives__namespace = /*#__PURE__*/_interopNamespaceDefault(Primitives);
var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const Tooltip = ({
  children,
  content,
  open,
  defaultOpen,
  onOpenChange,
  delayDuration,
  maxWidth = 220,
  className,
  side,
  sideOffset = 4,
  onClick,
  ...props
}) => {
  return /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Provider, {
    delayDuration: 100
  }, /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Root, {
    open: open,
    defaultOpen: defaultOpen,
    onOpenChange: onOpenChange,
    delayDuration: delayDuration
  }, /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Trigger, {
    onClick: onClick,
    asChild: true
  }, children), /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Portal, null, /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Content, Object.assign({
    side: side,
    sideOffset: sideOffset,
    align: "center",
    className: clx.clx("text-ui-fg-subtle animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 bg-ui-bg-base shadow-elevation-tooltip z-[999] rounded-lg px-3 py-2", label.labelVariants({
      size: "xsmall",
      weight: "plus"
    }), className)
  }, props, {
    style: {
      ...props.style,
      maxWidth
    }
  }), content))));
};

exports.Tooltip = Tooltip;
