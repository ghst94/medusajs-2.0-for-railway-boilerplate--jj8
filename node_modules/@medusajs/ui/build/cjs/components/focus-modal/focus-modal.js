'use strict';

var icons = require('@medusajs/icons');
var Primitives = require('@radix-ui/react-dialog');
var React = require('react');
var clx = require('../../utils/clx.js');
var kbd = require('../kbd/kbd.js');
var button = require('../button/button.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Primitives__namespace = /*#__PURE__*/_interopNamespaceDefault(Primitives);
var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const Root = Primitives__namespace.Root;
Root.displayName = "FocusModal.Root";
const Trigger = Primitives__namespace.Trigger;
Trigger.displayName = "FocusModal.Trigger";
const Portal = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React__namespace.createElement(Primitives__namespace.DialogPortal, Object.assign({
    className: clx.clx(className)
  }, props));
};
Portal.displayName = "FocusModal.Portal";
const Overlay = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Overlay, Object.assign({
    ref: ref,
    className: clx.clx("fixed inset-0 z-50",
    // "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",  // Re-enable when Admin UI has been cleaned up
    className)
  }, props));
});
Overlay.displayName = "FocusModal.Overlay";
const Content = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React__namespace.createElement(Portal, null, /*#__PURE__*/React__namespace.createElement(Overlay, null), /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Content, Object.assign({
    ref: ref,
    className: clx.clx("bg-ui-bg-base shadow-elevation-modal fixed inset-2 z-50 flex flex-col rounded-lg border focus:outline-none",
    // "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 duration-200",  // Re-enable when Admin UI has been cleaned up
    className)
  }, props)));
});
Content.displayName = "FocusModal.Content";
const Header = ({
  children,
  className,
  ...props
}) => {
  return /*#__PURE__*/React__namespace.createElement("div", Object.assign({
    className: clx.clx("border-ui-border-base flex items-start justify-between gap-x-4 border-b p-4", className)
  }, props), /*#__PURE__*/React__namespace.createElement("div", {
    className: "flex items-center gap-x-2"
  }, /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Close, {
    asChild: true
  }, /*#__PURE__*/React__namespace.createElement(button.Button, {
    variant: "transparent",
    size: "sm",
    format: "icon"
  }, /*#__PURE__*/React__namespace.createElement(icons.XMark, null))), /*#__PURE__*/React__namespace.createElement(kbd.Kbd, null, "esc")), /*#__PURE__*/React__namespace.createElement("div", null, children));
};
Header.displayName = "FocusModal.Header";
const Body = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React__namespace.createElement("div", Object.assign({
    className: clx.clx("flex-1", className)
  }, props));
};
Body.displayName = "FocusModal.Body";
const FocusModal = {
  Root,
  Trigger,
  Content,
  Header,
  Body
};

exports.FocusModal = FocusModal;
