'use strict';

var reactSlot = require('@radix-ui/react-slot');
var classVarianceAuthority = require('class-variance-authority');
var React = require('react');
var clx = require('../../utils/clx.js');
var label = require('../label/label.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const badgeVariants = classVarianceAuthority.cva("inline-flex items-center gap-x-0.5 border", {
  variants: {
    type: {
      default: "rounded-md",
      rounded: "rounded-full",
      icon: "rounded-md"
    },
    size: {
      sm: clx.clx("px-1.5", label.labelVariants({
        size: "xsmall",
        weight: "plus"
      })),
      md: clx.clx("px-2 py-0.5", label.labelVariants({
        size: "small",
        weight: "plus"
      })),
      lg: clx.clx("px-2.5 py-1", label.labelVariants({
        size: "base",
        weight: "plus"
      }))
    },
    color: {
      green: "bg-ui-tag-green-bg text-ui-tag-green-text [&_svg]:text-ui-tag-green-icon border-ui-tag-green-border",
      red: "bg-ui-tag-red-bg text-ui-tag-red-text [&_svg]:text-ui-tag-red-icon border-ui-tag-red-border",
      blue: "bg-ui-tag-blue-bg text-ui-tag-blue-text [&_svg]:text-ui-tag-blue-icon border-ui-tag-blue-border",
      orange: "bg-ui-tag-orange-bg text-ui-tag-orange-text [&_svg]:text-ui-tag-orange-icon border-ui-tag-orange-border",
      grey: "bg-ui-tag-neutral-bg text-ui-tag-neutral-text [&_svg]:text-ui-tag-neutral-icon border-ui-tag-neutral-border",
      purple: "bg-ui-tag-purple-bg text-ui-tag-purple-text [&_svg]:text-ui-tag-purple-icon border-ui-tag-purple-border"
    }
  },
  compoundVariants: [{
    type: "icon",
    size: "lg",
    className: "p-1"
  }, {
    type: "icon",
    size: "md",
    className: "p-0.5"
  }, {
    type: "icon",
    size: "sm",
    className: "p-0.5" // Icon does not get any smaller than `md`
  }],

  defaultVariants: {
    size: "md",
    type: "default",
    color: "grey"
  }
});
const Badge = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  size,
  type,
  color,
  asChild = false,
  ...props
}, ref) => {
  const Component = asChild ? reactSlot.Slot : "span";
  return /*#__PURE__*/React__namespace.createElement(Component, Object.assign({
    ref: ref,
    className: clx.clx(badgeVariants({
      size,
      type,
      color
    }), className)
  }, props));
});
Badge.displayName = "Badge";

exports.Badge = Badge;
