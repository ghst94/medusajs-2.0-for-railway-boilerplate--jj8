'use strict';

var Primitives = require('@radix-ui/react-switch');
var classVarianceAuthority = require('class-variance-authority');
var React = require('react');
var clx = require('../../utils/clx.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var Primitives__namespace = /*#__PURE__*/_interopNamespaceDefault(Primitives);
var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const switchVariants = classVarianceAuthority.cva("bg-ui-bg-toggle-off hover:bg-ui-bg-toggle-off-hover data-[state=unchecked]:hover:after:bg-toggle-off-hover-gradient before:shadow-details-switch-background focus:shadow-details-switch-background-focus data-[state=checked]:bg-interactive disabled:!bg-ui-bg-disabled group relative inline-flex items-center rounded-full outline-none transition-all before:absolute before:inset-0 before:rounded-full before:content-[''] after:absolute after:inset-0 after:rounded-full after:content-[''] disabled:cursor-not-allowed", {
  variants: {
    size: {
      small: "h-[16px] w-[28px]",
      base: "h-[18px] w-[32px]"
    }
  },
  defaultVariants: {
    size: "base"
  }
});
const thumbVariants = classVarianceAuthority.cva("bg-ui-bg-base shadow-details-switch-thumb group-disabled:bg-ui-bg-disabled pointer-events-none z-10 h-[14px] w-[14px] rounded-full transition-all", {
  variants: {
    size: {
      small: "h-[12px] w-[12px] data-[state=checked]:translate-x-3.5 data-[state=unchecked]:translate-x-0.5",
      base: "h-[14px] w-[14px] data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0.5"
    }
  },
  defaultVariants: {
    size: "base"
  }
});
const Switch = /*#__PURE__*/React__namespace.forwardRef(({
  className,
  size = "base",
  ...props
}, ref) => /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Root, Object.assign({
  className: clx.clx(switchVariants({
    size
  }), className)
}, props, {
  ref: ref
}), /*#__PURE__*/React__namespace.createElement(Primitives__namespace.Thumb, {
  className: clx.clx(thumbVariants({
    size
  }))
})));
Switch.displayName = "Switch";

exports.Switch = Switch;
