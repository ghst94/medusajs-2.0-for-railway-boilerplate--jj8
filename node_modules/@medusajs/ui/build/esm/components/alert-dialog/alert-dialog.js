import * as Primitives from '@radix-ui/react-alert-dialog';
import * as React from 'react';
import { clx } from '../../utils/clx.js';
import { Heading } from '../heading/heading.js';
import { Button } from '../button/button.js';
import { labelVariants } from '../label/label.js';

const Root = Primitives.Root;
Root.displayName = "AlertDialog.Root";
const Trigger = Primitives.Trigger;
Trigger.displayName = "AlertDialog.Trigger";
const Portal = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React.createElement(Primitives.AlertDialogPortal, Object.assign({
    className: clx(className)
  }, props));
};
Portal.displayName = "AlertDialog.Portal";
const Overlay = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(Primitives.Overlay, Object.assign({
    ref: ref,
    className: clx("bg-ui-bg-overlay fixed inset-0 z-50 backdrop-blur-sm",
    // "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0", // Re-enable when Admin UI has been cleaned up
    className)
  }, props));
});
Overlay.displayName = "AlertDialog.Overlay";
const Title = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(Primitives.Title, Object.assign({
    ref: ref,
    className: clx(className)
  }, props, {
    asChild: true
  }), /*#__PURE__*/React.createElement(Heading, {
    level: "h2"
  }, children));
});
Title.displayName = "AlertDialog.Title";
const Content = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Overlay, null), /*#__PURE__*/React.createElement(Primitives.Content, Object.assign({
    ref: ref,
    className: clx("bg-ui-bg-base shadow-elevation-flyout fixed left-[50%] top-[50%] z-50 flex w-full max-w-[400px] translate-x-[-50%] translate-y-[-50%] flex-col rounded-lg border focus:outline-none",
    // "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] duration-200",  // Re-enable when Admin UI has been cleaned up
    className)
  }, props)));
});
Content.displayName = "AlertDialog.Content";
const Description = /*#__PURE__*/React.forwardRef(({
  className,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(Primitives.Description, Object.assign({
    ref: ref,
    className: clx("text-subtle", labelVariants({
      size: "base"
    }), className)
  }, props));
});
Description.displayName = "AlertDialog.Description";
const Action = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(Primitives.Action, Object.assign({
    ref: ref,
    className: clx("", className)
  }, props, {
    asChild: true
  }), /*#__PURE__*/React.createElement(Button, {
    variant: "danger"
  }, children));
});
Action.displayName = "AlertDialog.Action";
const Cancel = /*#__PURE__*/React.forwardRef(({
  className,
  children,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(Primitives.Cancel, Object.assign({
    ref: ref,
    className: clx(className)
  }, props, {
    asChild: true
  }), /*#__PURE__*/React.createElement(Button, {
    variant: "secondary"
  }, children));
});
Cancel.displayName = "AlertDialog.Cancel";
const Header = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React.createElement("div", Object.assign({
    className: clx("flex flex-col gap-y-1 px-6 pt-6", className)
  }, props));
};
const Footer = ({
  className,
  ...props
}) => {
  return /*#__PURE__*/React.createElement("div", Object.assign({
    className: clx("flex items-center justify-end gap-x-2 p-6", className)
  }, props));
};
const AlertDialog = Object.assign(Root, {
  Trigger,
  Content,
  Title,
  Description,
  Action,
  Cancel,
  Header,
  Footer
});

export { AlertDialog };
