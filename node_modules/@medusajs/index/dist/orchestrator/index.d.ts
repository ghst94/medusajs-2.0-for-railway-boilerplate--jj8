import { IndexTypes, MedusaContainer } from "@medusajs/types";
export declare class Orchestrator {
    #private;
    /**
     * The current state of the orchestrator
     */
    get state(): "processing" | "error" | "idle" | "completed";
    /**
     * Reference to the currently processed entity
     */
    get current(): IndexTypes.SchemaObjectEntityRepresentation;
    /**
     * Reference to the number of entities left for processing
     */
    get remainingCount(): number;
    constructor(container: MedusaContainer, entities: IndexTypes.SchemaObjectEntityRepresentation[], options: {
        lockDuration: number;
        taskRunner: (entity: IndexTypes.SchemaObjectEntityRepresentation) => Promise<void>;
    });
    /**
     * Run the orchestrator to process the entities one by one.
     */
    process(): Promise<any>;
}
//# sourceMappingURL=index.d.ts.map